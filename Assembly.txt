Rcol = register store the number of columns  
Rrow =  register store the number of rows

CLAC                                   initialize all register to zero

IMM (number_of_col)
STORE1R Rcol

IMM (number_of_row)
STORE1R Rrow

LOAD1 Rcol  	AC1<--Rcol
INC3AC1 		AC1<--AC1+3 (newly added to ISA)
STORE1R Ri      Ri<--AC1 	(Ri = col +3)

IMM 1
STORE1R Rj  				(Rj = 1)

------- calculate the while loop boundary -------------

LOAD1 Rcol
INC2AC1
STORE1R RcolTemp           (col+2)
LOAD1 Rrow
INC2AC1
MUL1R RcolTemp        ((col+2)*(row+2))
SUB1 Rcol
DEC3AC1
STORE1R Rbnd       (store while loop boundary value)

_______________________while loop______________________________
LOAD1 Ri
ADD1 Rcol
INC1AC1
STORE1R Raddress
LDAC1R Raddress
STORE1R Rtotal         (Rtotal = c)

LOAD1 Ri
ADD1 Rcol
INC2AC1 
STORE1R Raddress
LDAC1R Raddress
MUL1 2
ADD1 Rtotal
STORE1R Rtotal    (Rtotal=c+a)

LOAD1 Ri
ADD1 Rcol
INC3AC1 
STORE1R Raddress
LDAC1R Raddress
ADD1 Rtotal
STORE1R Rtotal           (c=c+im[i+1+col+2])

LOAD1 Ri
DEC1AC1      
STORE1R Raddress
LDAC1R Raddress
MUL1 2
ADD1 Rtotal               (c=c+a)
STORE1R Rtotal          

LOAD1 Ri
STORE1R Raddress
LDAC1R Raddress
MUL1 4                    a=4*im[i]
ADD1 Rtotal
STORE1R Rtotal            (c=c+a)

LOAD1 Ri
INC1AC1 
STORE1R Raddress
LDAC1R Raddress
MUL1 2                    a=2*im[i+1]
ADD1 Rtotal
STORE1R Rtotal            

LOAD1 Ri
SUB1 Rcol
DEC3AC1
STORE1R Raddress
LDAC1R Raddress
ADD1 Rtotal
STORE1R Rtotal          c=c+im[i-1-col-2]

LOAD1 Ri
SUB1 Rcol
DEC2AC1
STORE1R Raddress
LDAC1R Raddress           a=2*im[i-col-2]
MUL1 2
ADD1 Rtotal
STORE1R Rtotal         

LOAD1 Ri
SUB1 Rcol
DEC1AC1
STORE1R Raddress
LDAC1R Raddress
ADD1 Rtotal
STORE1R Rtotal                c=c+im[i+1-col-2]


LOAD1 Rtotal
DIV1 16
STACR1 Ri                     im[i]=c/16 

LOAD1 Ri
INC2AC1   
STORE1R Ri                    i=i+2

LOAD1 Rj
INC1AC1 
STORE1R Rj                    j=j+1

JUMPLSB (now + 12):
	LOAD1 Rcol
	DIV1 2
	SUB1 Rj
	JUMPNEG (now+8):
		LOAD1 Ri
		ADD1 Rcol
		INC3AC1 
		INC1AC1 
		STORE1R Ri              i=i+col+4

		IMM 1
		STORE1R Rj              j=1

JUMPNLSB (now + 12):
	LOAD1 Rcol
	DIV1 2
	INC1AC1 
	SUB1 Rj
	JUMPNEG (now+7):
		LOAD1 Ri
		ADD1 Rcol
		INC3AC1 
		STORE1R Ri             i=i+col+3

		IMM 1
		STORE1R Rj

		
LOAD1 Ri
SUB1 Rbnd
JUMPNEG (loop_start_address)
exit from program
